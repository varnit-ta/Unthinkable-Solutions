// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: recipes.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
	"github.com/sqlc-dev/pqtype"
)

const createRecipe = `-- name: CreateRecipe :one
INSERT INTO recipes (title, description, cuisine, difficulty, diet_type, prep_time_minutes, cook_time_minutes, total_time_minutes, servings, tags, ingredients, steps, nutrition)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
RETURNING id
`

type CreateRecipeParams struct {
	Title            string                `json:"title"`
	Description      sql.NullString        `json:"description"`
	Cuisine          sql.NullString        `json:"cuisine"`
	Difficulty       sql.NullString        `json:"difficulty"`
	DietType         sql.NullString        `json:"diet_type"`
	PrepTimeMinutes  sql.NullInt32         `json:"prep_time_minutes"`
	CookTimeMinutes  sql.NullInt32         `json:"cook_time_minutes"`
	TotalTimeMinutes sql.NullInt32         `json:"total_time_minutes"`
	Servings         sql.NullInt32         `json:"servings"`
	Tags             []string              `json:"tags"`
	Ingredients      pqtype.NullRawMessage `json:"ingredients"`
	Steps            pqtype.NullRawMessage `json:"steps"`
	Nutrition        pqtype.NullRawMessage `json:"nutrition"`
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createRecipe,
		arg.Title,
		arg.Description,
		arg.Cuisine,
		arg.Difficulty,
		arg.DietType,
		arg.PrepTimeMinutes,
		arg.CookTimeMinutes,
		arg.TotalTimeMinutes,
		arg.Servings,
		pq.Array(arg.Tags),
		arg.Ingredients,
		arg.Steps,
		arg.Nutrition,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getRatingsForRecipe = `-- name: GetRatingsForRecipe :many
SELECT id, user_id, recipe_id, rating, created_at
FROM ratings
WHERE ratings.recipe_id = $1
`

func (q *Queries) GetRatingsForRecipe(ctx context.Context, recipeID sql.NullInt32) ([]Rating, error) {
	rows, err := q.db.QueryContext(ctx, getRatingsForRecipe, recipeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Rating
	for rows.Next() {
		var i Rating
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RecipeID,
			&i.Rating,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecipeByID = `-- name: GetRecipeByID :one
SELECT id, title, description, cuisine, difficulty, diet_type, prep_time_minutes, cook_time_minutes, total_time_minutes, servings, ingredients, steps, nutrition, tags,
  COALESCE((SELECT ROUND(AVG(rating)::numeric, 1)::text FROM ratings r WHERE r.recipe_id = recipes.id), '0') as average_rating
FROM recipes
WHERE recipes.id = $1
`

type GetRecipeByIDRow struct {
	ID               int32                 `json:"id"`
	Title            string                `json:"title"`
	Description      sql.NullString        `json:"description"`
	Cuisine          sql.NullString        `json:"cuisine"`
	Difficulty       sql.NullString        `json:"difficulty"`
	DietType         sql.NullString        `json:"diet_type"`
	PrepTimeMinutes  sql.NullInt32         `json:"prep_time_minutes"`
	CookTimeMinutes  sql.NullInt32         `json:"cook_time_minutes"`
	TotalTimeMinutes sql.NullInt32         `json:"total_time_minutes"`
	Servings         sql.NullInt32         `json:"servings"`
	Ingredients      pqtype.NullRawMessage `json:"ingredients"`
	Steps            pqtype.NullRawMessage `json:"steps"`
	Nutrition        pqtype.NullRawMessage `json:"nutrition"`
	Tags             []string              `json:"tags"`
	AverageRating    interface{}           `json:"average_rating"`
}

func (q *Queries) GetRecipeByID(ctx context.Context, id int32) (GetRecipeByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getRecipeByID, id)
	var i GetRecipeByIDRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Cuisine,
		&i.Difficulty,
		&i.DietType,
		&i.PrepTimeMinutes,
		&i.CookTimeMinutes,
		&i.TotalTimeMinutes,
		&i.Servings,
		&i.Ingredients,
		&i.Steps,
		&i.Nutrition,
		pq.Array(&i.Tags),
		&i.AverageRating,
	)
	return i, err
}

const insertRating = `-- name: InsertRating :one
INSERT INTO ratings (user_id, recipe_id, rating)
VALUES ($1, $2, $3)
RETURNING id, user_id, recipe_id, rating, created_at
`

type InsertRatingParams struct {
	UserID   sql.NullInt32 `json:"user_id"`
	RecipeID sql.NullInt32 `json:"recipe_id"`
	Rating   sql.NullInt32 `json:"rating"`
}

func (q *Queries) InsertRating(ctx context.Context, arg InsertRatingParams) (Rating, error) {
	row := q.db.QueryRowContext(ctx, insertRating, arg.UserID, arg.RecipeID, arg.Rating)
	var i Rating
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RecipeID,
		&i.Rating,
		&i.CreatedAt,
	)
	return i, err
}

const listRecipes = `-- name: ListRecipes :many
SELECT id, title, description, cuisine, difficulty, diet_type, prep_time_minutes, cook_time_minutes, total_time_minutes, servings,
  COALESCE((SELECT ROUND(AVG(rating)::numeric, 1)::text FROM ratings r WHERE r.recipe_id = recipes.id), '0') as average_rating
FROM recipes
ORDER BY recipes.id
LIMIT $1 OFFSET $2
`

type ListRecipesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListRecipesRow struct {
	ID               int32          `json:"id"`
	Title            string         `json:"title"`
	Description      sql.NullString `json:"description"`
	Cuisine          sql.NullString `json:"cuisine"`
	Difficulty       sql.NullString `json:"difficulty"`
	DietType         sql.NullString `json:"diet_type"`
	PrepTimeMinutes  sql.NullInt32  `json:"prep_time_minutes"`
	CookTimeMinutes  sql.NullInt32  `json:"cook_time_minutes"`
	TotalTimeMinutes sql.NullInt32  `json:"total_time_minutes"`
	Servings         sql.NullInt32  `json:"servings"`
	AverageRating    interface{}    `json:"average_rating"`
}

// List a page of recipes
func (q *Queries) ListRecipes(ctx context.Context, arg ListRecipesParams) ([]ListRecipesRow, error) {
	rows, err := q.db.QueryContext(ctx, listRecipes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRecipesRow
	for rows.Next() {
		var i ListRecipesRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Cuisine,
			&i.Difficulty,
			&i.DietType,
			&i.PrepTimeMinutes,
			&i.CookTimeMinutes,
			&i.TotalTimeMinutes,
			&i.Servings,
			&i.AverageRating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchRecipes = `-- name: SearchRecipes :many
SELECT id, title, description, cuisine, difficulty, diet_type, prep_time_minutes, cook_time_minutes, total_time_minutes, servings, ingredients, steps, nutrition, tags,
  COALESCE((SELECT ROUND(AVG(rating)::numeric, 1)::text FROM ratings r WHERE r.recipe_id = recipes.id), '0') as average_rating
FROM recipes
WHERE recipes.title ILIKE '%' || $1 || '%' OR $1 = ANY(recipes.tags)
ORDER BY recipes.id
LIMIT $2 OFFSET $3
`

type SearchRecipesParams struct {
	Column1 sql.NullString `json:"column_1"`
	Limit   int32          `json:"limit"`
	Offset  int32          `json:"offset"`
}

type SearchRecipesRow struct {
	ID               int32                 `json:"id"`
	Title            string                `json:"title"`
	Description      sql.NullString        `json:"description"`
	Cuisine          sql.NullString        `json:"cuisine"`
	Difficulty       sql.NullString        `json:"difficulty"`
	DietType         sql.NullString        `json:"diet_type"`
	PrepTimeMinutes  sql.NullInt32         `json:"prep_time_minutes"`
	CookTimeMinutes  sql.NullInt32         `json:"cook_time_minutes"`
	TotalTimeMinutes sql.NullInt32         `json:"total_time_minutes"`
	Servings         sql.NullInt32         `json:"servings"`
	Ingredients      pqtype.NullRawMessage `json:"ingredients"`
	Steps            pqtype.NullRawMessage `json:"steps"`
	Nutrition        pqtype.NullRawMessage `json:"nutrition"`
	Tags             []string              `json:"tags"`
	AverageRating    interface{}           `json:"average_rating"`
}

// Simple search by title or tags
func (q *Queries) SearchRecipes(ctx context.Context, arg SearchRecipesParams) ([]SearchRecipesRow, error) {
	rows, err := q.db.QueryContext(ctx, searchRecipes, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchRecipesRow
	for rows.Next() {
		var i SearchRecipesRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Cuisine,
			&i.Difficulty,
			&i.DietType,
			&i.PrepTimeMinutes,
			&i.CookTimeMinutes,
			&i.TotalTimeMinutes,
			&i.Servings,
			&i.Ingredients,
			&i.Steps,
			&i.Nutrition,
			pq.Array(&i.Tags),
			&i.AverageRating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
