// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: recipes.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
	"github.com/sqlc-dev/pqtype"
)

const createRecipe = `-- name: CreateRecipe :one
INSERT INTO recipes (title, cuisine, difficulty, cook_time_minutes, servings, tags, ingredients, steps, nutrition)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id
`

type CreateRecipeParams struct {
	Title           string
	Cuisine         sql.NullString
	Difficulty      sql.NullString
	CookTimeMinutes sql.NullInt32
	Servings        sql.NullInt32
	Tags            []string
	Ingredients     pqtype.NullRawMessage
	Steps           pqtype.NullRawMessage
	Nutrition       pqtype.NullRawMessage
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createRecipe,
		arg.Title,
		arg.Cuisine,
		arg.Difficulty,
		arg.CookTimeMinutes,
		arg.Servings,
		pq.Array(arg.Tags),
		arg.Ingredients,
		arg.Steps,
		arg.Nutrition,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getRatingsForRecipe = `-- name: GetRatingsForRecipe :many
SELECT id, user_id, recipe_id, rating, created_at
FROM ratings
WHERE recipe_id = $1
`

func (q *Queries) GetRatingsForRecipe(ctx context.Context, recipeID sql.NullInt32) ([]Rating, error) {
	rows, err := q.db.QueryContext(ctx, getRatingsForRecipe, recipeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Rating
	for rows.Next() {
		var i Rating
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RecipeID,
			&i.Rating,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecipeByID = `-- name: GetRecipeByID :one
SELECT id, title, cuisine, difficulty, cook_time_minutes, servings, ingredients, steps, nutrition, tags
FROM recipes
WHERE id = $1
`

type GetRecipeByIDRow struct {
	ID              int32
	Title           string
	Cuisine         sql.NullString
	Difficulty      sql.NullString
	CookTimeMinutes sql.NullInt32
	Servings        sql.NullInt32
	Ingredients     pqtype.NullRawMessage
	Steps           pqtype.NullRawMessage
	Nutrition       pqtype.NullRawMessage
	Tags            []string
}

func (q *Queries) GetRecipeByID(ctx context.Context, id int32) (GetRecipeByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getRecipeByID, id)
	var i GetRecipeByIDRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Cuisine,
		&i.Difficulty,
		&i.CookTimeMinutes,
		&i.Servings,
		&i.Ingredients,
		&i.Steps,
		&i.Nutrition,
		pq.Array(&i.Tags),
	)
	return i, err
}

const insertRating = `-- name: InsertRating :one
INSERT INTO ratings (user_id, recipe_id, rating)
VALUES ($1, $2, $3)
RETURNING id, user_id, recipe_id, rating, created_at
`

type InsertRatingParams struct {
	UserID   sql.NullInt32
	RecipeID sql.NullInt32
	Rating   sql.NullInt32
}

func (q *Queries) InsertRating(ctx context.Context, arg InsertRatingParams) (Rating, error) {
	row := q.db.QueryRowContext(ctx, insertRating, arg.UserID, arg.RecipeID, arg.Rating)
	var i Rating
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RecipeID,
		&i.Rating,
		&i.CreatedAt,
	)
	return i, err
}

const listRecipes = `-- name: ListRecipes :many
SELECT id, title, cuisine, difficulty, cook_time_minutes, servings
FROM recipes
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListRecipesParams struct {
	Limit  int32
	Offset int32
}

type ListRecipesRow struct {
	ID              int32
	Title           string
	Cuisine         sql.NullString
	Difficulty      sql.NullString
	CookTimeMinutes sql.NullInt32
	Servings        sql.NullInt32
}

// List a page of recipes
func (q *Queries) ListRecipes(ctx context.Context, arg ListRecipesParams) ([]ListRecipesRow, error) {
	rows, err := q.db.QueryContext(ctx, listRecipes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRecipesRow
	for rows.Next() {
		var i ListRecipesRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Cuisine,
			&i.Difficulty,
			&i.CookTimeMinutes,
			&i.Servings,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchRecipes = `-- name: SearchRecipes :many
SELECT id, title, cuisine, difficulty, cook_time_minutes, servings, ingredients, steps, nutrition, tags
FROM recipes
WHERE title ILIKE '%' || $1 || '%' OR $1 = ANY(tags)
ORDER BY id
LIMIT $2 OFFSET $3
`

type SearchRecipesParams struct {
	Column1 sql.NullString
	Limit   int32
	Offset  int32
}

type SearchRecipesRow struct {
	ID              int32
	Title           string
	Cuisine         sql.NullString
	Difficulty      sql.NullString
	CookTimeMinutes sql.NullInt32
	Servings        sql.NullInt32
	Ingredients     pqtype.NullRawMessage
	Steps           pqtype.NullRawMessage
	Nutrition       pqtype.NullRawMessage
	Tags            []string
}

// Simple search by title or tags
func (q *Queries) SearchRecipes(ctx context.Context, arg SearchRecipesParams) ([]SearchRecipesRow, error) {
	rows, err := q.db.QueryContext(ctx, searchRecipes, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchRecipesRow
	for rows.Next() {
		var i SearchRecipesRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Cuisine,
			&i.Difficulty,
			&i.CookTimeMinutes,
			&i.Servings,
			&i.Ingredients,
			&i.Steps,
			&i.Nutrition,
			pq.Array(&i.Tags),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
