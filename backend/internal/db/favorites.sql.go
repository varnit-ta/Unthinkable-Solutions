// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: favorites.sql

package db

import (
	"context"
	"database/sql"
)

const addFavorite = `-- name: AddFavorite :one
INSERT INTO favorites (user_id, recipe_id)
VALUES ($1, $2)
RETURNING id, user_id, recipe_id, created_at
`

type AddFavoriteParams struct {
	UserID   sql.NullInt32
	RecipeID sql.NullInt32
}

func (q *Queries) AddFavorite(ctx context.Context, arg AddFavoriteParams) (Favorite, error) {
	row := q.db.QueryRowContext(ctx, addFavorite, arg.UserID, arg.RecipeID)
	var i Favorite
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RecipeID,
		&i.CreatedAt,
	)
	return i, err
}

const listFavoritesByUser = `-- name: ListFavoritesByUser :many
SELECT f.id, f.user_id, f.recipe_id, f.created_at, r.title, r.cuisine
FROM favorites f
JOIN recipes r ON r.id = f.recipe_id
WHERE f.user_id = $1
ORDER BY f.created_at DESC
`

type ListFavoritesByUserRow struct {
	ID        int32
	UserID    sql.NullInt32
	RecipeID  sql.NullInt32
	CreatedAt sql.NullTime
	Title     string
	Cuisine   sql.NullString
}

func (q *Queries) ListFavoritesByUser(ctx context.Context, userID sql.NullInt32) ([]ListFavoritesByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, listFavoritesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFavoritesByUserRow
	for rows.Next() {
		var i ListFavoritesByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RecipeID,
			&i.CreatedAt,
			&i.Title,
			&i.Cuisine,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeFavorite = `-- name: RemoveFavorite :exec
DELETE FROM favorites WHERE user_id = $1 AND recipe_id = $2
`

type RemoveFavoriteParams struct {
	UserID   sql.NullInt32
	RecipeID sql.NullInt32
}

func (q *Queries) RemoveFavorite(ctx context.Context, arg RemoveFavoriteParams) error {
	_, err := q.db.ExecContext(ctx, removeFavorite, arg.UserID, arg.RecipeID)
	return err
}
